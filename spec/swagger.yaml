swagger: '2.0'
schemes:
  - http 
  - https 
host: barcelonapm.github.io # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: / 
info:
  description: Project-X Swagger Specification
  version: '0.0.1' 
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.
  title: Barcelona PM - project-X
  termsOfService: 'http://barcelona.pm.org/#bugs' 
  contact:
    email: barcelona-pm@pm.org 
    url: 'https://www.meetup.com/barcelonapm/' 
  license:
    name: Dummy 2.0  
    url: 'http://barcelona.pm.org/'
  x-logo:
    url: 'https://secure.meetupstatic.com/photos/event/5/b/1/2/600_456143314.jpeg'
externalDocs:
  description: Our Cool Project
  url: 'https://github.com/barcelonapm/project-X'
produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
  - application/xml
  # you can add any mime type your API produces to the list
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
  - application/xml
  # you can add any mime type your API consumes to the list

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Dates
    description: Operations about dates
  - name: Enroll
    description: Operations about Enrolling
  - name: Price
    description: Operations about Price
  - name: Schedule
    description: Operations about Schedule
  - name: Speakers
    description: Operations about Speaker
  - name: Title
    description: Operations about Talk Titles
# Security scheme definitions that can be used across the specification.
securityDefinitions:
  main_auth: # security definition name (you can name it as you want)
    type: oauth2 # authorization type, one of: oauth2, basic, apiKey
    # the following options are specific to oauth2 type
    authorizationUrl: 'http://example.com/api/oauth/dialog'
    flow: implicit
    scopes:
      'read:speaker': read speakers info
      'write:speaker': modify speakers
      'create:speaker': create speakers
      'delete:speaker': delete speakers
  api_key: # security definition name (you can name it as you want)
    type: apiKey
    # The following options are specific to apiKey type
    in: header # Where API key will be passed: header or query
    name: api_key # API key paramteer name
#  basic_auth: # security definition name (you can name it as you want)
#    type: basic

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/speakers/{speakerId}': # path parameter in curly braces
    # parameters list that are used with each operation for this path
    parameters:
        - $ref: '#/parameters/pretty'
    get:
      tags:
        - Speakers
      # summary is up to 120 symbold but we recommend to be shortest as possible
      summary: Get Speaker by Id.
      description: Retrieve the Speaker identified by its Id Code.
      # operationId should be unique across the whole specification
      operationId: getSpeakerById
      # list of parameters for the operation
      parameters:
        - $ref: '#/parameters/speakerId'
      # security schemas applied to this operation
      security:
        - main_auth:
          - 'read:speaker' # for auth2 provide list of scopes here
        - api_key: []
      # overwriting default global produces
      produces:
        - application/json
      responses: # list of responses
        '200':
          description: Success
          schema: # response schema can be specified for each response
            $ref: '#/definitions/Speaker'
        '403':
          description: Forbidden
        '404':
          description: Speaker not found
    # documentation for PUT operation for this path
    post:
      tags:
        - Speakers
      summary: Create Speaker
      description: This can only be done by the logged in user.
      operationId: createSpeaker
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/speakerId'
        - $ref: '#/parameters/speakerBody'
      security:
        - main_auth:
          - 'create:speaker'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid Speaker supplied
        '404':
          description: Speaker not found
    # documentation for PUT operation for this path
    put:
      tags:
        - Speakers
      summary: Updated Speaker
      description: This can only be done by the logged in user.
      operationId: updateSpeaker
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/speakerId'
        - $ref: '#/parameters/speakerBody'
      security:
        - main_auth:
          - 'write:speaker'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid Speaker supplied
        '404':
          description: Speaker not found
    delete:
      tags:
        - Speakers
      summary: Delete Speaker by Id.
      description: Delete the Speaker identified by its Id Code.
      operationId: deleteSpeakerById
      parameters:
        - $ref: '#/parameters/speakerId'
      security:
        - main_auth:
          - 'delete:speaker' # for auth2 provide list of scopes here
        - api_key: []
      produces:
        - application/json
      responses: # list of responses
        '200':
          description: Success
        '403':
          description: Forbidden
        '404':
          description: Speaker not found
parameters:
    pretty:
      name: pretty
      in: query # place where paramter is passed: path, header, query or body, formData
      description: Pretty print response
      # type of the paramter: string, number, integer, boolean, array
      type: boolean
    speakerId:
      name: speakerId
      in: path
      description: Speaker Identifier
      required: true
      type: integer
      format: int64
    speakerBody:
      name: speakerBody
      in: body
      description: Body Definition for Speaker Object.
      required: true
      schema:
        $ref: '#/definitions/Speaker'
# An object to hold data types that can be consumed and produced by operations.
# These data types can be primitives, arrays or models.
definitions:
  Email:
    description: User email address
    type: string
    format: email
    example: john.smith@example.com
  Speaker:
    type: object
    properties:
      speakerId:
        description: Speaker Identifier
        type: integer
        format: int64
        minLength: 1
        example: 1
      firstName:
        description: User first name
        type: string
        minLength: 1
        example: John
      lastName:
        description: User last name
        type: string
        minLength: 1
        example: Smith
      email:
        $ref: '#/definitions/Email'
